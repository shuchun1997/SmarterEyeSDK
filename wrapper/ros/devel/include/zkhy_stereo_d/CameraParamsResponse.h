// Generated by gencpp from file zkhy_stereo_d/CameraParamsResponse.msg
// DO NOT EDIT!


#ifndef ZKHY_STEREO_D_MESSAGE_CAMERAPARAMSRESPONSE_H
#define ZKHY_STEREO_D_MESSAGE_CAMERAPARAMSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zkhy_stereo_d
{
template <class ContainerAllocator>
struct CameraParamsResponse_
{
  typedef CameraParamsResponse_<ContainerAllocator> Type;

  CameraParamsResponse_()
    : focus(0.0)
    , cx(0.0)
    , cy(0.0)
    , RRoll(0.0)
    , RPitch(0.0)
    , RYaw(0.0)
    , Tx(0.0)
    , Ty(0.0)
    , Tz(0.0)  {
    }
  CameraParamsResponse_(const ContainerAllocator& _alloc)
    : focus(0.0)
    , cx(0.0)
    , cy(0.0)
    , RRoll(0.0)
    , RPitch(0.0)
    , RYaw(0.0)
    , Tx(0.0)
    , Ty(0.0)
    , Tz(0.0)  {
  (void)_alloc;
    }



   typedef double _focus_type;
  _focus_type focus;

   typedef double _cx_type;
  _cx_type cx;

   typedef double _cy_type;
  _cy_type cy;

   typedef double _RRoll_type;
  _RRoll_type RRoll;

   typedef double _RPitch_type;
  _RPitch_type RPitch;

   typedef double _RYaw_type;
  _RYaw_type RYaw;

   typedef double _Tx_type;
  _Tx_type Tx;

   typedef double _Ty_type;
  _Ty_type Ty;

   typedef double _Tz_type;
  _Tz_type Tz;





  typedef boost::shared_ptr< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CameraParamsResponse_

typedef ::zkhy_stereo_d::CameraParamsResponse_<std::allocator<void> > CameraParamsResponse;

typedef boost::shared_ptr< ::zkhy_stereo_d::CameraParamsResponse > CameraParamsResponsePtr;
typedef boost::shared_ptr< ::zkhy_stereo_d::CameraParamsResponse const> CameraParamsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator1> & lhs, const ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.focus == rhs.focus &&
    lhs.cx == rhs.cx &&
    lhs.cy == rhs.cy &&
    lhs.RRoll == rhs.RRoll &&
    lhs.RPitch == rhs.RPitch &&
    lhs.RYaw == rhs.RYaw &&
    lhs.Tx == rhs.Tx &&
    lhs.Ty == rhs.Ty &&
    lhs.Tz == rhs.Tz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator1> & lhs, const ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zkhy_stereo_d

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5a51179c7613aa6615125d7efe017e2";
  }

  static const char* value(const ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5a51179c7613aa6ULL;
  static const uint64_t static_value2 = 0x615125d7efe017e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zkhy_stereo_d/CameraParamsResponse";
  }

  static const char* value(const ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 focus\n"
"float64 cx\n"
"float64 cy\n"
"float64 RRoll\n"
"float64 RPitch\n"
"float64 RYaw\n"
"float64 Tx\n"
"float64 Ty\n"
"float64 Tz\n"
"\n"
;
  }

  static const char* value(const ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.focus);
      stream.next(m.cx);
      stream.next(m.cy);
      stream.next(m.RRoll);
      stream.next(m.RPitch);
      stream.next(m.RYaw);
      stream.next(m.Tx);
      stream.next(m.Ty);
      stream.next(m.Tz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraParamsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zkhy_stereo_d::CameraParamsResponse_<ContainerAllocator>& v)
  {
    s << indent << "focus: ";
    Printer<double>::stream(s, indent + "  ", v.focus);
    s << indent << "cx: ";
    Printer<double>::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    Printer<double>::stream(s, indent + "  ", v.cy);
    s << indent << "RRoll: ";
    Printer<double>::stream(s, indent + "  ", v.RRoll);
    s << indent << "RPitch: ";
    Printer<double>::stream(s, indent + "  ", v.RPitch);
    s << indent << "RYaw: ";
    Printer<double>::stream(s, indent + "  ", v.RYaw);
    s << indent << "Tx: ";
    Printer<double>::stream(s, indent + "  ", v.Tx);
    s << indent << "Ty: ";
    Printer<double>::stream(s, indent + "  ", v.Ty);
    s << indent << "Tz: ";
    Printer<double>::stream(s, indent + "  ", v.Tz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZKHY_STEREO_D_MESSAGE_CAMERAPARAMSRESPONSE_H
